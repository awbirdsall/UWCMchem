function MCMreadnwrite(MCM_flnm,save_flnm,k_fast_cutoff)
% function MCMreadnwrite(MCM_flnm,save_flnm,k_fast_cutoff)
% Reads FACSIMILE text-file output from MCM web extraction tool and converts it to a script
% for use with the UWCM chemical integrator.
% To use this routine, you must first download the desired MCM subset as a FACSIMILE file.
%
% INPUTS:
% MCM_flnm: name of FACSIMILE text file, INCLUDING EXTENSION.
% save_flnm: name of .m script to be generated. If not specified, MCM_flnm is used.
% k_fast_cutoff: semi-arbitrary limit for identifying fast reactions (see below). Default is 150.
%
% Note that the m-file generated by this routine will be written to the
% same directory as where the MCM subset text file is located.
%
% ABOUT THE INSTANTANEOUS REACTION ASSUMPTION
% Some reactions, notably decomposition of RO radicals and Criegee biradicals,
% are much too fast for a simple chemical integrator. This routine locates "fast"
% reactions by calculating typical rate constants and comparing to
% an arbitrary cutoff (currently set to 150 based on examination of all reactions in MCMv3.2).
% They are assumed "instantaneous," and the products of these reactions are
% substituted in for the reactants where they appears as products in
% other reactions. For example, consider this system:
% CH3O2 + NO = CH3O + NO2
% CH3O = HCHO + HO2
% The second reaction is very fast (k > 7000 /s). We make the assumption that CH3O
% decomposition is instantaneous and combine these into a single reaction:
% CH3O2 + NO = HCHO + HO2 + NO2
% As a result, CH3O will NOT be explicitly tracked in the reaction mechanism.
%
% 101211 GMW    Original Creation Date 
% 120210 GMW    Made a number of modifications for version 2 of the model. For full
%               details, see the UWCM_v2_ChangeLog.
% 120801 GMW    Converted from script to function.
% 120821 GMW    Fixed minor bug in the CheckFastCutoff section

%%%%%DEFAULT PARAMETERS%%%%%
if nargin==0
    MCM_flnm = 'MCMv32_biogenics.txt';
end
[mpath,name,ext] = fileparts(which(MCM_flnm));

if nargin<2
    save_flnm = [name '.m'];
end

if nargin<3
    k_fast_cutoff = 150; %arbitrary cutoff for "fast" reactions
end

CheckFastCutoff = 0; %flag for halting script to view k-values for determining k_fast_cutoff

%--------------------------------------------------------------------
% READ MCM FACSIMILE FILE
%--------------------------------------------------------------------
fid=fopen(MCM_flnm);

%scroll through headers
l = fgetl(fid);
while ~strncmp(l,'VARIABLE',8)
    l=fgetl(fid);
end

%grab species names
Snames = []; l=fgetl(fid);
while ~strncmp(l,'*;',2)
    Snames = [Snames l ' '];
    l = fgetl(fid);
end
Snames = regexp(Snames,'\<*\w*\>','match'); %cell array of species names
fgetl(fid); fgetl(fid); %skip next two lines

%grab lump peroxy radical names
RO2names = []; l=fgetl(fid);
while ~strncmp(l,'*;',2)
    RO2names = [RO2names l ' '];
    l = fgetl(fid);
end
RO2names = regexp(RO2names,'\<*\w*\>','match'); %cell array of RO2 names
RO2names(1) = []; %remove "RO2" from names
fgetl(fid); fgetl(fid); %skip next two lines

%grab number of species and reactions
rstart = ftell(fid); %start of reactions
fseek(fid,-50,'eof');
l=fgetl(fid);
n = str2num(char(regexp(l,'\d*','match')));
nSp = n(1); %number of species
nRx = n(2); %number of reactions
fseek(fid,rstart,'bof');

%read reactions and parse into cell arrays
k = cell(nRx,1);
Rnames = cell(nRx,1);
for i=1:nRx
    l = fgetl(fid);
    if l(end)~=';'
        l = [l ' ' fgetl(fid)]; %semicolon denotes end of reaction
    end
    l = l(3:end-2); %hack off beginning and end characters
    s = regexp(l,':','start');
    k{i} = l(1:s-2);
    Rnames{i} = l(s+2:end);
end
fclose(fid);

%fix components of rate constants string to be matlab-friendly
k = strrep(k,'TEMP','T');
k = strrep(k,'EXP','exp');
k = strrep(k,'D-','e-');
k = strrep(k,'D+','e');
k = strrep(k,'*','.*');
k = strrep(k,'/','./');
k = strrep(k,'@','.^');
k = strrep(k,'<','');
k = strrep(k,'>','');
k = strrep(k,'.*O2','.*.21.*M');
k = strrep(k,'.*N2','.*.78.*M');

%--------------------------------------------------------------------
% EXTRACT FAST REACTIONS
%--------------------------------------------------------------------
%calculate typical rate constants
T=298; M=2.46e19; H2O=1e17;
[krx,Knames] = MCMrateK(T,M,H2O);
% [krx,Knames] = CB05rateK(T,M);
for i=1:length(Knames) %break out reaction rate constants
    eval([Knames{i} '=krx(:,i);']);
end

sza=30;
[jval,Jnames] = MCMphoto(sza);
for i=1:length(Jnames) %break out j values
    eval([Jnames{i} '=jval(:,i);']);
end
% CB05Jval_fromMCM

kval=zeros(size(k));
for i=1:length(k)
    ki = k{i};
    if ~isempty(strfind(ki, '.*RO2'))
        ki = strrep(ki,'.*RO2','');
    end
    kval(i) = eval(ki);
end

if CheckFastCutoff %Halt script and look at k-values if needed
    [ksorted,isort] = sort(kval,'descend');
    Rnamessorted = Rnames(isort);
    display('Look for an obvious break in reaction rate constants...')
    openvar ksorted
    openvar Rnamessorted
    keyboard
end
    
fast = find(kval>k_fast_cutoff); %find fast rxns with arbitrary cutoff
kfast = k(fast); k(fast)=[]; %grab rate constants
Rnf = Rnames(fast); Rnames(fast)=[]; %grab reaction names

Snamesfast={}; ffast={}; Rnamesfast={}; q=0;
for i=1:length(fast)
    name = Rnf{i};
    ki = kfast{i};
    
    %get coefficient
    coi = regexp(ki,'KDEC\.\*','end');
    if ~isempty(coi)
        co = ki(coi+1:end);
    else
        co = '1';
    end
    
    %get reactants and products
    arrow = regexp(name,'=','start'); %reactant/product divider
    rct = regexp(name(1:arrow-1),'\<*\w*\>','match'); %cell array of reactant names
    prd = regexp(name(arrow+1:end),'\<*\w*\>','match'); %cell array of product names
    if length(rct)>1, error(['TOO MANY REACTANTS IN FAST REACTION ' num2str(i)]); end
    
    %build product f-string and Rname string
    fstr=[]; Rstr=[];
    for j=1:length(prd)
        if any(strcmp(prd{j},Snamesfast)) 
            %this code is supposed to deal with the possibility that one of the products 
            %of the "fast reaction" is itself a fast reactant.
            % It does not work for fast equilibria (e.g. CH3SOO and CH3S)
            if str2num(co)~=1
                disp('Warning, coefficient will be off...')
                keyboard
            end
            m = strmatch(prd{j},Snamesfast,'exact');
            fstr=[fstr ffast{m}];
            Rstr=[Rstr Rnamesfast{m}];
        else
            fstr=[fstr 'f' prd{j} '(i)=f' prd{j} '(i)+' co '; '];
            if co=='1', Rstr=[Rstr ' + ' prd{j}];
            else Rstr=[Rstr ' + ' co prd{j}];
            end
        end
    end
    
    %build fast reaction string cell arrays
    Sname = rct{1};
    if any(strcmp(Sname,Snamesfast)) %stack rxns with same reactant
        j = strmatch(Sname,Snamesfast,'exact');
        ffast{j} = [ffast{j} fstr];
        Rnamesfast{j} = [Rnamesfast{j} Rstr];
    else
        q=q+1;
        Snamesfast{q,1} = Sname;
        ffast{q,1} = fstr;
        Rnamesfast{q,1} = Rstr;
        j = strmatch(Sname,Snames,'exact'); Snames(j)=[]; %erase from species names list
        [tf,loc] = ismember(Sname,RO2names); %look for in RO2
        if tf
            RO2names(loc) = []; %remove from RO2 list
        end
    end
end

%--------------------------------------------------------------------
% WRITE RATES SCRIPT FILE
%--------------------------------------------------------------------
fid = fopen(fullfile(mpath,save_flnm),'w');

%Print header
fprintf(fid,'%s\n',['% ' save_flnm]);
fprintf(fid,'%s\n',['% generated from ' MCM_flnm]);
fprintf(fid,'%s\n',['% ' datestr(now,'YYYYmmdd')]);
fprintf(fid,'%s\n',['% # of species = ' num2str(length(Snames))]);
fprintf(fid,'%s\n\n',['% # of reactions = ' num2str(length(Rnames))]);

%Print species names
fprintf(fid,'%s\n','SpeciesToAdd = {...');
for i=1:length(Snames)
    s = Snames{i};
    fprintf(fid,'%s',['''' s '''; ']);
    if rem(i,10)==0
        fprintf(fid,'%s\n','...');
    end
end
fprintf(fid,'%s\n\n','};');

%Print RO2 names
fprintf(fid,'%s\n','RO2ToAdd = {...');
for i=1:length(RO2names)
    s = RO2names{i};
    fprintf(fid,'%s',['''' s '''; ']);
    if rem(i,10)==0
        fprintf(fid,'%s\n','...');
    end
end
fprintf(fid,'%s\n\n','};');

%Print some code
fprintf(fid,'%s\n\n','AddSpecies');

%create reaction blocks
for i=1:length(Rnames);
    name = Rnames{i};
    ki = k{i};
    arrow = regexp(name,'=','start'); %reactant/product divider
    rct = regexp(name(1:arrow-1),'\<*\w*\>','match'); %cell array of reactant names
    prd = regexp(name(arrow+1:end),'\<*\w*\>','match'); %cell array of product names

    Gstr = []; fstr=[];
    for j=1:length(rct) %build reactant multiplier string and reactant f-string
        Gstr = [Gstr 'Gstr{i,' num2str(j) '} = ''' rct{j} '''; '];
        fstr = [fstr 'f' rct{j} '(i)=f' rct{j} '(i)-1; '];
    end

    if ~isempty(strfind(ki, '.*RO2')) %deal with RO2 in rate constant
        ki = strrep(ki,'.*RO2','');
        Gstr = [Gstr 'Gstr{i,2} = ''RO2'';'];
    end

    for j=1:length(prd) %build product f-string
        p = prd{j};
        if any(strcmp(p,Snamesfast)) %replace alkoxy radicals
            m = strmatch(p,Snamesfast,'exact');
            fstr = [fstr ffast{m}];
            name = regexprep(name,['\<' p '\>'],Rnamesfast{m});
        else
            fstr=[fstr 'f' p '(i)=f' p '(i)+1; '];
        end
    end
    
    %print reaction parameters
    fprintf(fid,'%s\n','i=i+1;');
    fprintf(fid,'%s\n',['Rnames{i} = ''' name ''';']);
    fprintf(fid,'%s\n',['k(:,i) = ' ki ';']);
    fprintf(fid,'%s\n',Gstr);
    fprintf(fid,'%s\n\n',fstr);
end
fclose(fid);


